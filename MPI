#include <iostream>
#include <cstdlib>
#include <chrono>
#include <mpi.h>

using namespace std;
using namespace std::chrono;

const int N = 700;

int main(int argc, char* argv[])
{
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int A[N][N];
    int B[N][N];
    int C[N][N];

    srand(time(0) + rank);

    for (int i = rank * (N / size); i < (rank + 1) * (N / size); i++)
    {
        for (int j = 0; j < N; j++)
        {
            A[i][j] = rand() % 100;
            B[i][j] = rand() % 100;
        }
    }

    auto start = std::chrono::high_resolution_clock::now();

    for (int i = rank * (N / size); i < (rank + 1) * (N / size); i++)
    {
        for (int j = 0; j < N; j++)
        {
            C[i][j] = 0;
            for (int k = 0; k < N; k++)
            {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    MPI_Gather(&C[rank * (N / size)][0], (N * N) / size, MPI_INT, &C, (N * N) / size, MPI_INT, 0, MPI_COMM_WORLD);

    auto end = std::chrono::high_resolution_clock::now();

    if (rank == 0)
    {
        auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        cout << "Time taken for multiplication: " << duration.count()/1E6 << " seconds" << endl;
    }

    MPI_Finalize();
    return 0;
}
